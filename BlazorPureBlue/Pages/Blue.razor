@page "/blue"
@inject Blazored.LocalStorage.ILocalStorageService ls
<h3>
    @Today.Year.ToString() @Today.ToString("MMMM").ToUpper()
    <small class="text-muted"> Tento měsíc máš splněno @donecount z @nfields.</small>
</h3>
<div class="row">


    <div class="col-4">
        @if (!monthUnlocked)
        {
            <button type="button" class="btn btn-primary btn-sm" @onclick="SubstractMonth">Předchozí měsíc</button>
            <button type="button" class="btn btn-primary btn-sm" @onclick="AddMonth">Další měsíc</button>
            <button type="button" class="btn alert-success btn-sm" @onclick="SaveData">Ulozit zmeny</button>
        }
    </div>
    <div class="col-4 btn-group-sm">
        @if (monthUnlocked)
        {
            
            <button type="button" class="btn-sm" @onclick="LockMonth">Zamknout&Uložit </button>
        }
        else
        {
            <button type="button" class="btn-sm" @onclick="UnlockMonth">Odemknout</button>
        }
    </div>
</div>
<div class="table-responsive">
    <table>
        <thead>
            <tr>
                <th scope="col">Den</th>
                @for (int i = 1; i <= DateTime.DaysInMonth(Year, Month); i++)
                {
                    @if (i == DateTime.Now.Day && Today.Month == DateTime.Now.Month && Today.Year == DateTime.Now.Year)
                    {
                        <th scope="col" class="text-info">@i</th>
                    }
                    else
                    {
                        <th scope="col">@i</th>
                    }

                }
            </tr>
        </thead>
        <tbody>
            @for (int j = 0; j < categories.Count; j++)
            {
                <tr>
                    <th scope="row">@categories[j]</th>
                    @for (int i = 1; i <= DateTime.DaysInMonth(Today.Year, Month); i++)
                    {
                        {
                            <td>


                                <BlueLifeField IsActive=@actStates.Find(r => r.Date.Day == i && r.Date.Month == Today.Month && r.Date.Year == Today.Year && r.CatIndex == j).IsActive
                                               Model=@actStates.Find(r => r.Date.Day == i && r.Date.Month == Today.Month && r.Date.Year == Today.Year && r.CatIndex == j ) OnMouseOut="SaveData"/>


                            </td>



                        }
                    }

                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    DateTime Today = DateTime.Now;
    int Month = DateTime.Now.Month;
    int Year = DateTime.Now.Year;
    int nfields;
    int donecount;
    bool monthUnlocked = false;
    bool actchecked = false;
    public List<BlueLifeFieldModel> actStates;
    public List<string> categories = new List<string>();
    public BlueLifeFieldModel temp = new BlueLifeFieldModel();

    protected override async Task OnInitializedAsync()
    {
        actStates = new List<BlueLifeFieldModel>();
        if (await ls.ContainKeyAsync("MainList"))
        {

            actStates = await ls.GetItemAsync<List<BlueLifeFieldModel>>("MainList");
            //
        }

        if (await ls.ContainKeyAsync("CatList"))
        {

            categories = await ls.GetItemAsync<List<string>>("CatList");
        }
        else
        {
            categories.Add("Ranní cvičení (alespoň 15 minut)");
            categories.Add("Čištění zubů (ráno a večer)");
            categories.Add("Mytí se studenou vodou (celé tělo)");
            categories.Add("Slušná mluva celý den (ani jedno hrubé či sprosté slovo)");
            categories.Add("Čestné chování (nelhat, nešidit, neurážet, neubližovat, nepoškozovat majetek)");
            categories.Add("Dobrý skutek (alespoň jeden denně)");
            categories.Add("Radostný prožitek (např. přečíst si kousek knihy)");
            await ls.SetItemAsync<List<string>>("CatList", categories);
        }
         CheckIfMonthIsStored();
         LockMonth();
         RefreshCounts();



    }

    void CheckIfMonthIsStored()
    {
        var reslts = from state in actStates
                     where (state.Date.Month == Today.Month && state.Date.Year == Today.Year)
                     select state;
        if (reslts.Count<BlueLifeFieldModel>() == 0)
        {
            for (int j = 0; j < categories.Count; j++)
            {


                for (int i = 1; i <= DateTime.DaysInMonth(Today.Year, Today.Month); i++)
                {
                    DateTime temp = new DateTime(Today.Year, Today.Month, i);
                    BlueLifeFieldModel fld = new BlueLifeFieldModel();
                    fld.Date = temp;
                    fld.IsActive = false;
                    fld.CatIndex = j;
                    fld.IsChecked = false;
                    actStates.Add(fld);

                }
            }
        }
        //SaveData();

    }

    void SubstractMonth()
    {
        Today = Today.AddMonths(-1);
        Month = Today.Month;
        Year = Today.Year;
        CheckIfMonthIsStored();
        RefreshCounts();


    }
    void AddMonth()
    {
        Today = Today.AddMonths(1);
        Month = Today.Month;
        Year = Today.Year;
        //await CheckIfMonthIsStored();
        //await RefreshCounts();
        CheckIfMonthIsStored();
        RefreshCounts();

    }
    public async Task SaveData()
    {
         //await ls.SetItemAsync<List<BlueLifeFieldModel>>("MainList", actStates);
         RefreshCounts();
    }
    void RefreshCounts()
    {
        nfields = DateTime.DaysInMonth(Today.Year, Today.Month) * categories.Count;
        donecount = actStates.Count(st => st.Date.Month == Today.Month && st.Date.Year == Today.Year && st.IsChecked == true);
    }

    void LockMonth()
    {
        monthUnlocked = false;
        foreach (var item in actStates)
        {
            if (item.Date.Day == DateTime.Now.Date.Day && item.Date.Month == DateTime.Now.Date.Month && item.Date.Year == DateTime.Now.Date.Year)
            {
                item.IsActive = true;


            }
            else
            {
                item.IsActive = false;

            }
        }
        SaveData();
    }
    void UnlockMonth()
    {
        monthUnlocked = true;
        foreach (var item in actStates)
        {
            if (item.Date.Month == Today.Month)
            {
                item.IsActive = true;

            }
            else
            {
                item.IsActive = false;

            }
        }
        //SaveData();

    }


    public class DayTaskRecord
    {
        public DateTime Date { get; set; }
        public string Tasktitle { get; set; }
        public bool TaskState { get; set; }

    }

}
